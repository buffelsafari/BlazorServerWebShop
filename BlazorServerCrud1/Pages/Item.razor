@page "/Item/{Type}/{Id}"

@using BlazorServerCrud1.Components.CarouselComponent
@using CosmosDBData
@using CosmosDBService.DTO.Product


@inject ICosmosDBContext cosmosDB;



<h3>Item @Id</h3>
@if (product != null)
{
    <Carousel Images=img>
        <div>--hello--</div>
        <div>--world--</div>
    </Carousel>


    <span>@product.Id</span><br>
    <span>@product.Type</span><br>
    <span>@product.Image</span><br>
    <span>@product.Name</span><br>
    <span>@product.Path</span><br>
    <span>@product.Price</span><br>
    <span>@product.PriceUnit</span><br>

    @if (product is ApperalProductDTO)
    {
        <label for="colors">Choose a color:</label>

        <select @bind=@color>  
            @foreach (var item in ((ApperalProductDTO)product).ColorOptions)
            {
                 <option value="@item">@item</option>   
            }
        </select>
        
    }

    <span>selected: @color</span>
}

@code 
{
    [Parameter]
    public string? Id { get; set; }

    [Parameter]
    public string? Type { get; set; }

    private string[] img = { "/images/ananas.jpg", "/images/atlas.jpg", "/images/buffel.jpg", "/images/cyckel.jpg", "/images/dator.jpg", "/images/eggs.jpg", "/images/el.jpg", "/images/humidor.jpg", "/images/ost.jpg", "/images/queenph.png", "/images/skinka.jpg" }; 

    private string? color;

    private AbstractBaseProductDTO? product; 

    protected override async Task OnParametersSetAsync()
    {
        
        switch (Type)
        {
            case "tool":
                product=await cosmosDB.GetProduct<ToolProductDTO>(Id);
                break;
            case "furniture":
                product=await cosmosDB.GetProduct<FurnitureProductDTO>(Id);
                break;
            case "food":
                product=await cosmosDB.GetProduct<FoodProductDTO>(Id);
                break;
            case "apperal":
                product=await cosmosDB.GetProduct<ApperalProductDTO>(Id);
                break;
            default:
                product=await cosmosDB.GetProduct<ProductCardDTO>(Id);
                break;

        }


        
        

        await base.OnParametersSetAsync();

    }
}

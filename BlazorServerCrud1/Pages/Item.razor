@page "/Item/{Type}/{Id}"

@using BlazorServerCrud1.Components.CarouselComponent
@using BlazorServerCrud1.Components.ProductComponents
@using CosmosDBData
@using CosmosDBService.DTO.Product
@using System.Reflection
@using System.Text.Json.Nodes
@using System.Diagnostics
@using Newtonsoft.Json.Linq



@inject ICosmosDBContext cosmosDB;




@if (product != null)
{
    <span>@product.Path</span><br>
    <span>@product.Type</span><br>
    <h1>Item @product.Name</h1>

    <div class="container-fluid">
        <div class="row">
            <div class="col-12 col-md-6 col-xl-5">
                <Carousel Images=product.ProductImages></Carousel>
            </div>
            <div class="col-12 col-md-6 col-xl-4">
                <h3>Description</h3>
                <p>@product.Description</p>
            </div>
            <div class="col-12 col-md-6 col-xl-3">
                <h3>Specifications</h3>
                <ul>                    
                @foreach (var spec in product.Specifications.Properties())
                {
                    <li>@spec.Name @spec.FirstOrDefault()</li>        
                }
                </ul>
            </div>
        </div>
    </div>
    <span>@product.Price</span><br>
    <span>@product.PriceUnit</span><br>

    
    

    
    

    @if (product is ApperalProductDTO)
    {
        ApperalProductDTO apperal = (ApperalProductDTO)product;
        
        <ProductOption @ref=colorOptions Options=apperal.ColorOptions>
            color:
        </ProductOption>
        
        <ProductOption @ref=sizeOptions Options=apperal.SizeOptions>
            size:
        </ProductOption>
        
                
        <br>
        if (colorOptions != null)
        {
            <span>selected color: @colorOptions.Selected</span>
        }
        <br>
        if (sizeOptions != null)
        {
            <span>selected color: @sizeOptions.Selected</span>
        }
        
    }

    <br>
    <button @onclick=click> press me to update!</button>
    
}

@code 
{
    private ProductOption? colorOptions;
    private ProductOption? sizeOptions;

    [Parameter]
    public string? Id { get; set; }

    [Parameter]
    public string? Type { get; set; }



    private string? size;

    private BaseDetailedProductDTO? product; 

    protected override async Task OnParametersSetAsync()
    {


        switch (Type)
        {
            case "tool":
                product=await cosmosDB.GetProduct<ToolProductDTO>(Id);
                break;
            case "furniture":
                product=await cosmosDB.GetProduct<FurnitureProductDTO>(Id);
                break;
            case "food":
                product=await cosmosDB.GetProduct<FoodProductDTO>(Id);
                break;
            case "apperal":
                product=await cosmosDB.GetProduct<ApperalProductDTO>(Id);                
                break;
            default:
                product=await cosmosDB.GetProduct<BaseDetailedProductDTO>(Id);
                break;

        }


        
        
        



        await base.OnParametersSetAsync();

    }

    

    private void click()
    {
        StateHasChanged();
    }
}

@using System.Diagnostics
@using BlazorServerCrud1.Data.Settings

@inject ISettingsService settings;


<div>
    @foreach(int item in ButtonItems)
    {
        if (item == SelectedPage)
        {
            <button disabled>@(item)</button>
        }
        else
        {
            <button @onclick="()=> OnClick(item)">@(item)</button>
        }
    }
    <span>items: @TotalNumberOfItems</span>


    <select @onchange=OnChange>
        <option value=@ItemsPerPage selected disabled hidden>@ItemsPerPage</option>
        <option value=4 >4</option>
        <option value=6 >6</option>
        <option value=12 >12</option>
        <option value=24 >24</option>
    </select>

</div>

@ChildContent 

@code 
{

    [Parameter]
    public EventCallback<int> OnSelectPage { get; set; }

    [Parameter]
    public EventCallback<int> OnSelectPageSize { get; set; }

    [Parameter]
    public int SelectedPage { get; set; }

    [Parameter]
    public int TotalNumberOfItems { get; set; }

    [Parameter]
    public int ItemsPerPage { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }


    private List<int> ButtonItems = new List<int>();

    protected override Task OnParametersSetAsync()
    {
        ButtonItems.Clear();
        for (int i = TotalNumberOfItems, j=0; i >0; i-=ItemsPerPage, j++)
        {
            ButtonItems.Add(j);
        }

        return base.OnParametersSetAsync();
    }

    private async Task OnClick(int i)
    {        
        await OnSelectPage.InvokeAsync(i);        
    }

    private async Task OnChange(ChangeEventArgs args)
    {
         
        if (int.TryParse(args.Value!=null?args.Value.ToString():"-", out int v))
        {
            await OnSelectPageSize.InvokeAsync(v);
        }
    }

}
